shopt -s extglob

array_build() {
  # maybe this should handle sparse arrays?
  eval "$1=(\"\${$2[@]}\")"
}

funcgrep() {
  { declare -f "$1" || declare -f package; } 2>/dev/null | grep -E "$2"
}

extract_global_var() {
  # $1: variable name
  # $2: multivalued
  # $3: name of output var

  local attr=$1 isarray=$2 outputvar=$3

  if (( isarray )); then
    declare -n ref=$attr
    # Still need to use array_build here because we can't handle the scoping
    # semantics that would be included with the use of 'declare -n'.
    [[ ${ref[@]} ]] && array_build "$outputvar" "$attr"
  else
    [[ -v $attr ]] && printf -v "$outputvar" %s "${!attr}"
  fi
}

extract_function_var() {
  # $1: function name
  # $2: variable name
  # $3: multivalued
  # $4: name of output var

  local funcname=$1 attr=$2 isarray=$3 outputvar=$4 attr_regex= decl= r=1

  if (( isarray )); then
    printf -v attr_regex '^[[:space:]]*(declare( -[[:alpha:]])*)? %q\+?=\(' "$2"
  else
    printf -v attr_regex '^[[:space:]]*(declare( -[[:alpha:]])*)? %q\+?=[^(]' "$2"
  fi

  while read -r; do
    # strip leading whitespace and any usage of declare
    decl=${REPLY##*([[:space:]])?(declare +(-+([[:alpha:]]) ))}
    eval "${decl/#$attr/$outputvar}"

    # entering this loop at all means we found a match, so notify the caller.
    r=0
  done < <(funcgrep "$funcname" "$attr_regex")

  return $r
}

pkgbuild_get_attribute() {
  # $1: package name
  # $2: attribute name
  # $3: name of output var
  # $4: multivalued

  local pkgname=$1 attrname=$2 outputvar=$3 isarray=$4

  printf -v "$outputvar" %s ''

  if [[ $pkgname ]]; then
    extract_global_var "$attrname" "$isarray" "$outputvar"
    extract_function_var "package_$pkgname" "$attrname" "$isarray" "$outputvar"
  else
    extract_global_var "$attrname" "$isarray" "$outputvar"
  fi
}

srcinfo_open_section() {
  printf '%s = %s\n' "$1" "$2"
}

srcinfo_close_section() {
  echo
}

srcinfo_write_attr() {
  # $1: architecture (empty string for arch-independent metadata)
  # $2: attr name
  # $3: attr values

  local arch=$1 attrname=$2 attrvalues=("${@:3}")

  # normalize whitespace, strip leading and trailing
  attrvalues=("${attrvalues[@]//+([[:space:]])/ }")
  attrvalues=("${attrvalues[@]#[[:space:]]}")
  attrvalues=("${attrvalues[@]%[[:space:]]}")

  printf "\t$attrname${arch:+@}$arch = %s\n" "${attrvalues[@]}"
}

pkgbuild_extract_to_srcinfo() {
  # $1: pkgname
  # $2: architecute (empty string for arch-independent metadata)
  # $3: attr name
  # $4: multivalued

  local pkgname=$1 architecture=$2 attrname=$3 isarray=$4 outvalue=

  if pkgbuild_get_attribute "$pkgname" "$attrname" 'outvalue' "$isarray"; then
    srcinfo_write_attr "$architecture" "$attrname" "${outvalue[@]}"
  fi
}

srcinfo_create_section_details() {
  local attr

  for attr in "${singlevalued[@]}"; do
    pkgbuild_extract_to_srcinfo "$1" '' "$attr" 0
  done

  for attr in "${multivalued[@]}"; do
    pkgbuild_extract_to_srcinfo "$1" '' "$attr" 1
  done
}

srcinfo_create_global() {
  local multivalued=(arch groups license checkdepends makedepends
                     depends optdepends provides conflicts replaces
                     source noextract options backup)

  srcinfo_open_section 'pkgbase' "${pkgbase:-$pkgname}"
  srcinfo_create_section_details ''
  srcinfo_close_section
}

srcinfo_create_package() {
  local multivalued=(arch groups license checkdepends makedepends depends
                     optdepends provides conflicts replaces options backup)

  srcinfo_open_section 'pkgname' "$1"
  srcinfo_create_section_details "$1"
  srcinfo_close_section
}

srcinfo_create() {
  local pkg singlevalued=(pkgdesc pkgver pkgrel epoch url install changelog)

  srcinfo_create_global

  for pkg in "${pkgname[@]}"; do
    srcinfo_create_package "$pkg"
  done
}

clear_environment() {
  # optimized for small exclusion lists.
  mapfile -t environ < <(compgen -A variable |
      grep -xvF "$(printf '%s\n' "$@")")

  # expect that some variables marked read only will complain here
  unset -v "${environ[@]}" 2>/dev/null
}

srcinfo_create_from_pkgbuild() {(
    clear_environment PATH

    shopt -u extglob
    . "$1" || exit 1
    shopt -s extglob
    srcinfo_create
)}
