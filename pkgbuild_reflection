#!/bin/bash

shopt -s extglob

array_build() {
  eval "$1=(\"\${$2[@]}\")"
}

funcgrep() {
  { declare -f "$1" || declare -f package; } 2>/dev/null | grep -E "$2"
}

extract_global_var() {
  # $1: variable name
  # $2: multivalued
  # $3: name of output var

  local attr=$1 isarray=$2 outputvar=$3

  if (( isarray )); then
    array_build "$outputvar" "$attr"
  else
    declare -g "$outputvar=${!attr}"
  fi
}

extract_function_var() {
  # $1: function name
  # $2: variable name
  # $3: multivalued
  # $4: name of output var

  local funcname=$1 attr=$2 isarray=$3 outputvar=$4 attr_regex= decl=

  if (( isarray )); then
    printf -v attr_regex '^[[:space:]]*(declare( -[[:alpha:]])*)? %q\+?=\(' "$2"
  else
    printf -v attr_regex '^[[:space:]]*(declare( -[[:alpha:]])*)? %q\+?=[^(]' "$2"
  fi

  while read -r; do
    # strip leading whitespace and any usage of declare
    decl=${REPLY##*([[:space:]])?(declare +(-+([[:alpha:]]) ))}
    eval "${decl/#$attr/$outputvar}"
  done < <(funcgrep "$funcname" "$attr_regex")
}

pkgbuild_get_array_attribute() {
  # $1: package name
  # $2: attribute name
  # $3: name of output var

  declare -g "$3="

  if [[ $1 ]]; then
    extract_function_var "package_$1" "$2" 1 "$3"
  else
    extract_global_var "$2" 1 "$3"
  fi
}

pkgbuild_get_attribute() {
  # $1: package name
  # $2: attribute name
  # $3: name of output var

  declare -g "$3="

  if [[ $1 ]]; then
    extract_function_var "package_$1" "$2" 0 "$3"
  else
    extract_global_var "$2" 0 "$3"
  fi
}

srcinfo_write_header() {
  printf '%s = %s\n' "$1" "$2"
}

srcinfo_end_section() {
  echo
}

srcinfo_write_attr() {
  # $1: pkgname (pass an empty string for global level)
  # $2: architecture (empty string for arch-independent metadata)
  # $3: attr name
  # $4: attr value

  local fmtstring arch=$1 attrname=$2 attrvalues=("${@:3}")

  [[ $attrvalues ]] || return 0

  if [[ $arch ]]; then
    fmtstring+="$attrname@$arch = %s"
  else
    fmtstring+="$attrname = %s"
  fi

  printf "\t$fmtstring\n" "${attrvalues[@]}"
}

pkgbuild_extract_to_srcinfo() {
  # $1: pkgname
  # $2: architecute (empty string for arch-independent metadata)
  # $3: attr name
  # $4: multivalued

  local pkgname=$1 architecture=$2 attrname=$3 isarray=$4
  unset outvalue

  if (( isarray )); then
    pkgbuild_get_array_attribute "$pkgname" "$attrname" 'outvalue'
    srcinfo_write_attr "$architecture" "$attrname" "${outvalue[@]}"
  else
    pkgbuild_get_attribute "$pkgname" "$attrname" 'outvalue'
    srcinfo_write_attr "$architecture" "$attrname" "$outvalue"
  fi
}

srcinfo_create_global() {
  srcinfo_write_header 'pkgbase' "${pkgbase:-$pkgname}"

  local singlevalued=(pkgname pkgdesc pkgver pkgrel url)
  local multivalued=(arch groups license makedepends depends optdepends provides
                     conflicts replaces source)

  for attr in "${singlevalued[@]}"; do
    pkgbuild_extract_to_srcinfo '' '' "$attr" 0
  done

  for attr in "${multivalued[@]}"; do
    pkgbuild_extract_to_srcinfo '' '' "$attr" 1
  done

  srcinfo_end_section
}

srcinfo_create_package() {
  local pkg=$1 attr= a=

  srcinfo_write_header 'pkgname' "$pkg"

  # single-valued attributes
  for attr in pkgdesc url; do
    pkgbuild_extract_to_srcinfo "$pkg" '' "$attr" 0
  done

  # multi-valued attributes
  for attr in license groups; do
    pkgbuild_extract_to_srcinfo "$pkg" '' "$attr" 1
  done

  # FIXME: these attribute should be architecture specific
  for attr in depends optdepends provides conflicts replaces; do
    pkgbuild_extract_to_srcinfo "$pkg" '' "$attr" 1
  done

  srcinfo_end_section
}

srcinfo_create() {
  local pkg

  srcinfo_create_global

  for pkg in "${pkgname[@]}"; do
    srcinfo_create_package "$pkg"
  done
}

srcinfo_create_from_pkgbuild() {
  ( . "$1" && srcinfo_create )
}

# vim: set et ts=2 sw=2:
